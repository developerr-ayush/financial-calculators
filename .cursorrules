# Financial Calculator - Cursor Development Rules & Guidelines

## üèóÔ∏è Component Architecture & Structure

### **Component Organization**

```
src/
‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îú‚îÄ‚îÄ ui/                 # Reusable UI components
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Card.jsx       # Card component with variants
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Button.jsx     # Button component with variants
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Input.jsx      # Input component with validation
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Container.jsx  # Layout container component
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Tabs.jsx       # Tab navigation component
‚îÇ   ‚îú‚îÄ‚îÄ Header.jsx         # Site header component
‚îÇ   ‚îî‚îÄ‚îÄ Table.jsx          # Data table component
‚îú‚îÄ‚îÄ pages/                 # Page-level components
‚îÇ   ‚îú‚îÄ‚îÄ Home.jsx          # Home page
‚îÇ   ‚îú‚îÄ‚îÄ SIP.jsx           # SIP Calculator page
‚îÇ   ‚îî‚îÄ‚îÄ IncomeTaxCalculator.jsx
‚îî‚îÄ‚îÄ utils/                # Utility functions
```

### **Component Creation Guidelines**

#### **1. New UI Components**

- Create in `src/components/ui/` directory
- Use PascalCase naming (e.g., `CustomButton.jsx`)
- Include comprehensive PropTypes validation
- Export both the component and its sub-components
- Include default props where appropriate

#### **2. Page Components**

- Create in `src/pages/` directory
- Use PascalCase naming
- Include SEO metadata
- Use Container component for consistent layout

#### **3. Component Structure Pattern**

```jsx
import React from "react";
import PropTypes from "prop-types";

// Optional: Import other UI components
import { Card, CardContent } from "./ui/Card";

export const ComponentName = ({
  children,
  variant = "default",
  size = "md",
  className = "",
  ...props
}) => {
  return <div className={`component-base-class ${className}`}>{children}</div>;
};

ComponentName.propTypes = {
  children: PropTypes.node.isRequired,
  variant: PropTypes.oneOf(["default", "primary", "secondary"]),
  size: PropTypes.oneOf(["sm", "md", "lg"]),
  className: PropTypes.string,
};

export default ComponentName;
```

## üé® UI/UX Design System

### **Design Principles**

1. **Minimal & Clean**: Use subtle backgrounds, clean typography
2. **Consistent Spacing**: Use 4px/8px based spacing system
3. **Accessible Colors**: High contrast ratios, proper color usage
4. **Mobile-First**: Responsive design starting from mobile

### **Color Palette**

```css
/* Primary Colors */
--color-primary: #2563eb; /* blue-600 */
--color-primary-hover: #1d4ed8; /* blue-700 */

/* Background Colors */
--color-bg-primary: #020617; /* slate-950 */
--color-bg-secondary: #0f172a; /* slate-900 */
--color-bg-tertiary: #1e293b; /* slate-800 */

/* Text Colors */
--color-text-primary: #ffffff;
--color-text-secondary: #94a3b8; /* slate-400 */
--color-text-muted: #64748b; /* slate-500 */

/* Border Colors */
--color-border: rgba(255, 255, 255, 0.1);
--color-border-hover: rgba(255, 255, 255, 0.2);
```

### **Typography Scale**

```css
/* Headings */
--text-4xl: 2.25rem; /* 36px */
--text-3xl: 1.875rem; /* 30px */
--text-2xl: 1.5rem; /* 24px */
--text-xl: 1.25rem; /* 20px */
--text-lg: 1.125rem; /* 18px */

/* Body Text */
--text-base: 1rem; /* 16px */
--text-sm: 0.875rem; /* 14px */
--text-xs: 0.75rem; /* 12px */
```

### **Component Variants**

#### **Card Component**

```jsx
<Card variant="default">     {/* Subtle background */}
<Card variant="elevated">    {/* More prominent */}
<Card variant="ghost">       {/* Transparent */}
```

#### **Button Component**

```jsx
<Button variant="primary">   {/* Primary action */}
<Button variant="secondary"> {/* Secondary action */}
<Button variant="ghost">     {/* Minimal action */}
<Button variant="danger">    {/* Destructive action */}
```

#### **Input Component**

```jsx
<Input variant="default">    {/* Standard input */}
<Input variant="error">      {/* Error state */}
<Input variant="success">    {/* Success state */}
```

## üíª Code Quality & Standards

### **ESLint Rules**

```json
{
  "extends": ["eslint:recommended", "plugin:react/recommended"],
  "rules": {
    "react/prop-types": "error",
    "react/jsx-uses-react": "error",
    "react/jsx-uses-vars": "error",
    "no-unused-vars": "warn",
    "prefer-const": "error",
    "no-var": "error"
  }
}
```

### **PropTypes Validation**

- **Required**: All props must have PropTypes validation
- **Children**: Use `PropTypes.node.isRequired` for children
- **Enums**: Use `PropTypes.oneOf([...])` for variant/size props
- **Functions**: Use `PropTypes.func.isRequired` for event handlers

### **Import/Export Rules**

```jsx
// ‚úÖ Good: Named exports for components
export const Button = () => { ... };
export const Input = () => { ... };

// ‚úÖ Good: Default export for main component
export default MainComponent;

// ‚ùå Avoid: Mixed exports
export { Button, default as Input };
```

## üéØ Responsive Design Guidelines

### **Breakpoint System**

```css
/* Mobile First Approach */
sm: 640px   /* Small devices */
md: 768px   /* Tablets */
lg: 1024px  /* Laptops */
xl: 1280px  /* Desktops */
```

### **Responsive Patterns**

```jsx
// ‚úÖ Mobile-first grid
<div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3">

// ‚úÖ Responsive spacing
<div className="p-4 sm:p-6 lg:p-8">

// ‚úÖ Responsive text
<h1 className="text-2xl sm:text-3xl lg:text-4xl">
```

## ‚ôø Accessibility Guidelines

### **ARIA & Semantic HTML**

- Use semantic HTML elements (`<main>`, `<section>`, `<article>`)
- Add `aria-label` for interactive elements
- Use proper heading hierarchy (h1 ‚Üí h2 ‚Üí h3)
- Add `alt` text for images

### **Keyboard Navigation**

- All interactive elements must be keyboard accessible
- Use `tabIndex` appropriately
- Provide focus indicators
- Support Enter/Space for buttons

### **Screen Reader Support**

```jsx
// ‚úÖ Good
<label htmlFor="email">Email Address</label>
<input id="email" type="email" aria-describedby="email-help" />

// ‚úÖ Good
<button aria-label="Close modal" onClick={handleClose}>
  <span aria-hidden="true">√ó</span>
</button>
```

## üöÄ Performance Best Practices

### **Component Optimization**

- Use `React.memo()` for expensive components
- Implement `useMemo()` and `useCallback()` for complex calculations
- Avoid inline functions in render methods
- Use `key` props properly in lists

### **Bundle Size Optimization**

- Tree-shake unused imports
- Use dynamic imports for heavy components
- Optimize images and assets
- Minimize CSS bundle size

### **Performance Monitoring**

- Monitor Core Web Vitals
- Use React DevTools Profiler
- Implement error boundaries
- Monitor bundle size changes

## üß™ Testing Guidelines

### **Component Testing**

```jsx
// Test component rendering
test("renders component correctly", () => {
  render(<Component />);
  expect(screen.getByRole("button")).toBeInTheDocument();
});

// Test user interactions
test("handles click events", () => {
  const handleClick = jest.fn();
  render(<Component onClick={handleClick} />);
  fireEvent.click(screen.getByRole("button"));
  expect(handleClick).toHaveBeenCalledTimes(1);
});

// Test prop variations
test.each([
  ["primary", "Primary Button"],
  ["secondary", "Secondary Button"],
])("renders %s variant correctly", (variant, expectedText) => {
  render(<Component variant={variant} />);
  expect(screen.getByText(expectedText)).toBeInTheDocument();
});
```

## üìö Documentation Standards

### **Component Documentation**

```jsx
/**
 * Button component for user interactions
 *
 * @param {Object} props - Component props
 * @param {React.ReactNode} props.children - Button content
 * @param {string} props.variant - Button style variant
 * @param {string} props.size - Button size
 * @param {boolean} props.disabled - Disabled state
 * @param {Function} props.onClick - Click handler
 *
 * @example
 * <Button variant="primary" onClick={handleClick}>
 *   Click me
 * </Button>
 */
```

### **README Updates**

- Update README.md for significant changes
- Document new components and features
- Include usage examples
- Maintain change log

## üîß Development Workflow

### **Git Practices**

```bash
# ‚úÖ Good commit messages
feat: add new Button component with variants
fix: resolve Card component prop validation
refactor: optimize Input component performance
docs: update component documentation

# ‚úÖ Good branch naming
feature/new-button-component
fix/card-prop-validation
refactor/input-optimization
```

### **Code Review Checklist**

- [ ] PropTypes validation added
- [ ] ESLint errors resolved
- [ ] Responsive design implemented
- [ ] Accessibility features included
- [ ] Performance optimizations applied
- [ ] Tests written/updated
- [ ] Documentation updated

### **Deployment Guidelines**

- Test all functionality before deployment
- Check responsive design on multiple devices
- Verify accessibility features
- Monitor performance metrics
- Update version numbers appropriately

## üéØ Component Specific Guidelines

### **Form Components**

- Always include proper labels
- Implement error states
- Add loading states for async operations
- Validate inputs on both client and server

### **Layout Components**

- Use Container for consistent max-widths
- Implement responsive grid systems
- Add proper spacing between elements
- Consider sticky positioning for important content

### **Interactive Components**

- Provide hover states
- Implement focus management
- Add proper ARIA attributes
- Support keyboard navigation

## üö® Common Pitfalls to Avoid

### **‚ùå Anti-Patterns**

```jsx
// ‚ùå Don't: Inline styles
<div style={{backgroundColor: 'blue'}}>

// ‚ùå Don't: Magic numbers
<div className="p-7"> {/* Use predefined spacing */}

// ‚ùå Don't: Non-semantic HTML
<div className="header"> {/* Use <header> */}

// ‚ùå Don't: Missing prop validation
const Component = ({children}) => { /* Add PropTypes */}
```

### **‚úÖ Best Practices**

```jsx
// ‚úÖ Do: Use design tokens
<div className="bg-blue-600 hover:bg-blue-700">

// ‚úÖ Do: Semantic HTML
<header className="site-header">

// ‚úÖ Do: Proper prop validation
Component.propTypes = {
  children: PropTypes.node.isRequired
};

// ‚úÖ Do: Consistent naming
const handleUserClick = () => { /* Not handleClick */}
```

## üìà Future Enhancements

### **Planned Improvements**

- [ ] TypeScript migration
- [ ] Storybook documentation
- [ ] Automated visual regression testing
- [ ] Performance monitoring integration
- [ ] Dark/light mode toggle
- [ ] Internationalization support

### **Tech Stack Evolution**

- Monitor React updates for new features
- Evaluate new CSS frameworks
- Consider build tool optimizations
- Implement modern bundling strategies

---

_These guidelines ensure consistent, maintainable, and scalable code across the entire financial calculator application. Always prioritize user experience, accessibility, and performance in all development decisions._
